/*******************************************************************************
 * ClinCapture, Copyright (C) 2009-2013 Clinovo Inc.
 * 
 * This program is free software: you can redistribute it and/or modify it under the terms of the Lesser GNU General Public License 
 * as published by the Free Software Foundation, either version 2.1 of the License, or(at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty 
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the Lesser GNU General Public License for more details.
 * 
 * You should have received a copy of the Lesser GNU General Public License along with this program.  
 \* If not, see <http://www.gnu.org/licenses/>. Modified by Clinovo Inc 01/29/2013.
 ******************************************************************************/

package org.akaza.openclinica.util;

import org.akaza.openclinica.bean.core.Status;
import org.akaza.openclinica.bean.login.UserAccountBean;
import org.akaza.openclinica.core.EmailEngine;
import org.akaza.openclinica.dao.login.UserAccountDAO;
import org.akaza.openclinica.web.SQLInitServlet;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Calendar;
import java.util.Date;
import java.util.MissingResourceException;
import java.util.ResourceBundle;

//Added by Clinovo
public class InactiveAnalyzer {

	protected static final Logger logger = LoggerFactory.getLogger(InactiveAnalyzer.class.getName());

	private static final String INACTIVE_ACCOUNT = "INACTIVE_ACCOUNT";

	public static void analyze(UserAccountBean userAccountBean, UserAccountDAO userAccountDao, ResourceBundle restext) {
		// Clinovo - tbh - protect your inputs!
		String strMaxInactiveAccount = SQLInitServlet.getField("max_inactive_account") != "" ? SQLInitServlet
				.getField("max_inactive_account") : "90";
		int maxInactiveAccount = Integer.parseInt(strMaxInactiveAccount);
		if (maxInactiveAccount != 0) {
			maxInactiveAccount = strMaxInactiveAccount != "" ? maxInactiveAccount * (-1) : -30; // default is 30 days
																								// ago
			Calendar calendar;
			Date cutoffDate;
			Date currDate = new Date();
			calendar = Calendar.getInstance();
			calendar.setTime(currDate);
			calendar.add(Calendar.DATE, maxInactiveAccount); // default cut-off date is 30 days ago
			cutoffDate = calendar.getTime();
			if (userAccountBean != null) { // if account exists
				if (!userAccountBean.getName().equals("root")) { // if not root account
					if (userAccountBean.getLastVisitDate() != null) { // not a newly created user
						if (userAccountBean.getLastVisitDate().before(cutoffDate)) {
							userAccountDao.lockUser(userAccountBean.getId()); // lock
							updateBean(userAccountBean);
							sendAccountLockEmail(userAccountBean, restext, INACTIVE_ACCOUNT, maxInactiveAccount);
						}
					} else { // new user
						if (userAccountBean.getCreatedDate().before(cutoffDate)) { // account was created before cut-off
																					// date
							userAccountDao.lockUser(userAccountBean.getId()); // lock
							updateBean(userAccountBean);
							sendAccountLockEmail(userAccountBean, restext, INACTIVE_ACCOUNT, maxInactiveAccount);
						}
					}
				}
			}
		}
	}

	private static void updateBean(UserAccountBean uab) {
		uab.setAccountNonLocked(false);
		uab.setStatus(Status.LOCKED);
	}

	private static void sendAccountLockEmail(UserAccountBean u, ResourceBundle restext, String reason, int numdays) {
		EmailEngine emailEngine = new EmailEngine(EmailEngine.getSMTPHost(), "5");
		String body;
		String subject;
		String to;
		String from;
		try {
			logger.info("Notifying  " + restext.getString("openclinica_administrator") + " about locking the account '"
					+ u.getName() + "'");
			to = SQLInitServlet.getField("adminEmail");
			from = SQLInitServlet.getField("adminEmail");
			subject = restext.getString("openclinica_account") + " '" + u.getName() + "' "
					+ restext.getString("has_been_locked") + " " + restext.getString("for_security_reasons");
			body = restext.getString("dear_openclinica_administrator") + ",\n\n";
			body += restext.getString("please_be_informed_that") + " " + subject + ". ";
			body += restext.getString("this_action_was_triggered") + " ";
			if (reason.equals(INACTIVE_ACCOUNT)) {
				body += restext.getString("when_a_user_tried_to_login_with_this_account") + " "
						+ restext.getString("after_a_period_of_inactivity_of_more_than") + " " + (-1) * numdays
						+ " days.\n\n\n\n";
			} else {
				body += restext.getString("due_to_excessive_failed_login_attempts") + ".\n\n\n\n";
			}
			body += "** This message was automatically generated by ClinCapture EDC System ** \n";
			logger.info("Sending email...begin");
			emailEngine.process(to, from, subject, body);
		} catch (MissingResourceException mre) {
			throw mre;
		} catch (Exception e) {
			//
		}
		logger.info("Sending email...done");
	}
}
